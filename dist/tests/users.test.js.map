{"version":3,"sources":["../../src/tests/users.test.ts"],"sourcesContent":["import bcrypt from 'bcrypt';\nimport mongoose from 'mongoose';\nimport request from 'supertest';\nimport App from '@/app';\nimport { CreateUserDto } from '@dtos/users.dto';\nimport UsersRoute from '@routes/users.route';\n\nafterAll(async () => {\n  await new Promise<void>(resolve => setTimeout(() => resolve(), 500));\n});\n\ndescribe('Testing Users', () => {\n  describe('[GET] /users', () => {\n    it('response fineAll Users', async () => {\n      const usersRoute = new UsersRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      users.find = jest.fn().mockReturnValue([\n        {\n          _id: 'qpwoeiruty',\n          email: 'a@email.com',\n          password: await bcrypt.hash('q1w2e3r4!', 10),\n        },\n        {\n          _id: 'alskdjfhg',\n          email: 'b@email.com',\n          password: await bcrypt.hash('a1s2d3f4!', 10),\n        },\n        {\n          _id: 'zmxncbv',\n          email: 'c@email.com',\n          password: await bcrypt.hash('z1x2c3v4!', 10),\n        },\n      ]);\n\n      (mongoose as any).connect = jest.fn();\n      const app = new App([usersRoute]);\n      return request(app.getServer()).get(`${usersRoute.path}`).expect(200);\n    });\n  });\n\n  describe('[GET] /users/:id', () => {\n    it('response findOne User', async () => {\n      const userId = 'qpwoeiruty';\n\n      const usersRoute = new UsersRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      users.findOne = jest.fn().mockReturnValue({\n        _id: 'qpwoeiruty',\n        email: 'a@email.com',\n        password: await bcrypt.hash('q1w2e3r4!', 10),\n      });\n\n      (mongoose as any).connect = jest.fn();\n      const app = new App([usersRoute]);\n      return request(app.getServer()).get(`${usersRoute.path}/${userId}`).expect(200);\n    });\n  });\n\n  describe('[POST] /users', () => {\n    it('response Create User', async () => {\n      const userData: CreateUserDto = {\n        email: 'test@email.com',\n        password: 'q1w2e3r4',\n      };\n\n      const usersRoute = new UsersRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      users.findOne = jest.fn().mockReturnValue(null);\n      users.create = jest.fn().mockReturnValue({\n        _id: '60706478aad6c9ad19a31c84',\n        email: userData.email,\n        password: await bcrypt.hash(userData.password, 10),\n      });\n\n      (mongoose as any).connect = jest.fn();\n      const app = new App([usersRoute]);\n      return request(app.getServer()).post(`${usersRoute.path}`).send(userData).expect(201);\n    });\n  });\n\n  describe('[PUT] /users/:id', () => {\n    it('response Update User', async () => {\n      const userId = '60706478aad6c9ad19a31c84';\n      const userData: CreateUserDto = {\n        email: 'test@email.com',\n        password: 'q1w2e3r4',\n      };\n\n      const usersRoute = new UsersRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      if (userData.email) {\n        users.findOne = jest.fn().mockReturnValue({\n          _id: userId,\n          email: userData.email,\n          password: await bcrypt.hash(userData.password, 10),\n        });\n      }\n\n      users.findByIdAndUpdate = jest.fn().mockReturnValue({\n        _id: userId,\n        email: userData.email,\n        password: await bcrypt.hash(userData.password, 10),\n      });\n\n      (mongoose as any).connect = jest.fn();\n      const app = new App([usersRoute]);\n      return request(app.getServer()).put(`${usersRoute.path}/${userId}`).send(userData);\n    });\n  });\n\n  describe('[DELETE] /users/:id', () => {\n    it('response Delete User', async () => {\n      const userId = '60706478aad6c9ad19a31c84';\n\n      const usersRoute = new UsersRoute();\n      const users = usersRoute.usersController.userService.users;\n\n      users.findByIdAndDelete = jest.fn().mockReturnValue({\n        _id: '60706478aad6c9ad19a31c84',\n        email: 'test@email.com',\n        password: await bcrypt.hash('q1w2e3r4!', 10),\n      });\n\n      (mongoose as any).connect = jest.fn();\n      const app = new App([usersRoute]);\n      return request(app.getServer()).delete(`${usersRoute.path}/${userId}`).expect(200);\n    });\n  });\n});\n"],"names":["afterAll","Promise","resolve","setTimeout","describe","it","usersRoute","UsersRoute","users","usersController","userService","find","jest","fn","mockReturnValue","_id","email","password","bcrypt","hash","mongoose","connect","app","App","request","getServer","get","path","expect","userId","findOne","userData","create","post","send","findByIdAndUpdate","put","findByIdAndDelete","delete"],"mappings":"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"}